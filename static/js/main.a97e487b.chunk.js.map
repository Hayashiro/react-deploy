{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","React","Component","About","About2","Contact","TableComp","ListComp","LinkPage","to","path","component","URLParmExample","this","props","match","params","someid","App","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAUMA,E,4JAEJ,WAEE,OAAS,sD,GAJMC,IAAMC,WAQnBC,E,4JAEJ,WAEE,OAAS,uD,GAJOF,IAAMC,WAQpBE,E,4JAEJ,WAEE,OAAS,wF,GAJQH,IAAMC,WAQrBG,E,4JAEJ,WAEE,OAAS,yD,GAJSJ,IAAMC,WAQtBI,E,4JAEJ,WAEE,OACE,gCACE,kCACE,+BAAI,mCAAU,mCAAU,sCACxB,+BAAI,mCAAU,mCAAU,sCACxB,+BAAI,mCAAU,mCAAU,+C,GATVL,IAAMC,WAgBxBK,E,4JAEJ,WAEE,OACE,+BACE,mCACA,mCACA,mCACA,0C,GATeN,IAAMC,WAevBM,E,4JAEJ,WAEE,OACE,gCACE,2CACA,0EACA,cAAC,IAAD,UACE,gCACG,cAAC,IAAD,CAAMC,GAAG,kBAAT,mBADH,IAC2C,uBACxC,cAAC,IAAD,CAAMA,GAAG,iBAAT,kBAEA,cAAC,IAAD,CAAOC,KAAK,kBAAkBC,UAAWL,IACzC,cAAC,IAAD,CAAOI,KAAK,iBAAiBC,UAAWJ,gB,GAd9BN,IAAMC,WAwBvBU,E,4JAEJ,WAEE,OAAS,2CAAcC,KAAKC,MAAMC,MAAMC,OAAOC,OAAtC,W,GAJgBhB,IAAMC,WAgEpBgB,E,4JArDb,WAEE,OAEE,cAAC,IAAD,UACE,gCACE,yDACA,+BASE,6BAAI,cAAC,IAAD,CAASC,OAAK,EAACV,GAAG,IAAlB,oBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,SAAZ,qBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,WAAZ,uBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,YAAZ,wBACJ,6BAAI,cAAC,IAAD,CAASA,GAAG,cAAZ,mCAGN,uBAQA,cAAC,IAAD,CAAOU,OAAK,EAACT,KAAK,IAAIC,UAAWX,IACjC,cAAC,IAAD,CAAOU,KAAK,SAASC,UAAWR,IAChC,cAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWN,IAClC,cAAC,IAAD,CAAOK,KAAK,YAAYC,UAAWH,IAKnC,cAAC,IAAD,CAAOE,KAAK,mBAAmBC,UAAWC,IAM1C,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWP,a,GA/CxBH,IAAMC,WC9FJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a97e487b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  NavLink\n} from 'react-router-dom';\n\n\nclass Home extends React.Component \n{  \n  render () \n  {      \n    return ( <p>Some home content</p> );\n  }    \n};\n\nclass About extends React.Component \n{  \n  render () \n  {      \n    return ( <p>Some about content</p> );\n  }    \n};\n\nclass About2 extends React.Component \n{  \n  render () \n  {      \n    return ( <p>Some other about content in a different component. </p> );\n  }    \n};\n\nclass Contact extends React.Component \n{  \n  render () \n  {      \n    return ( <p>Some contact content</p> );\n  }    \n};\n\nclass TableComp extends React.Component \n{\n  render ()\n  {\n    return (\n      <table>\n        <tbody>\n          <tr><td>1</td><td>2</td><td>3</td></tr>\n          <tr><td>4</td><td>5</td><td>6</td></tr>\n          <tr><td>7</td><td>2</td><td>3</td></tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nclass ListComp extends React.Component \n{\n  render ()\n  {\n    return (\n      <ul>\n        <li>1</li>\n        <li>2</li>\n        <li>3</li>\n        <li>4</li>                \n      </ul>\n    )\n  }\n}\n\nclass LinkPage extends React.Component \n{  \n  render () \n  {      \n    return ( \n      <div>\n        <h2>Link Page</h2>\n        <p>A page with regular React Router links...</p>\n        <Router>\n          <div>\n             <Link to=\"/linkpage/table\">About</Link> <br />\n             <Link to=\"/linkpage/list\">List</Link>\n \n             <Route path=\"/linkpage/table\" component={TableComp}/>\n             <Route path=\"/linkpage/list\" component={ListComp}/>\n          </div>\n        </Router>\n      </div>\n    );\n  }    \n};\n\n// We can get at the url parameter with this.props.match.params \n// followed by the url parameter name defined in the route.  \nclass URLParmExample extends React.Component \n{\n  render()\n  {\n    return ( <p>URL parm: {this.props.match.params.someid} </p> );\n  }\n}\n\n\nclass App extends React.Component \n{\n  render ()\n  {\n    return (\n\n      <Router>\n        <div>\n          <h1>Single Page Application</h1>\n          <ul>\n            {\n              // Our NavLinks create navigiation links that React Router \n              // will associate with our routes.  NavLinks will use the \n              // active css class to style themselves when they are the \n              // active link.  See the active css class in App.css.  We\n              // need to use the exact property for our root/home path \n              // otherwise home will always be considered active.\n            }\n            <li><NavLink exact to=\"/\">Home</NavLink></li>\n            <li><NavLink to=\"/about\">About</NavLink></li>\n            <li><NavLink to=\"/contact\">Contact</NavLink></li>\n            <li><NavLink to=\"/linkpage\">LinkPage</NavLink></li>\n            <li><NavLink to=\"/urlparm/34\">URL Parm Example</NavLink></li>\n          </ul>\n\n          <hr/>\n  \n          {\n            // Render a different component depending on the path, \"/\" is the \n            // \"no path\" case.  We add the property exact to have it render \n            // only on exact matches, otherwise \"/\" would also match for \n            // things like \"/about\".\n          } \n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/contact\" component={Contact}/>\n          <Route path=\"/linkpage\" component={LinkPage}/>\n          \n          { \n            // A route with a url parameter in it, :someid after /urlparm \n          }\n          <Route path=\"/urlparm/:someid\" component={URLParmExample}/>\n\n          {\n            // We can have multiple components render in multiple areas by \n            // including multiple Route components.\n          }\n          <Route path=\"/about\" component={About2} />\n\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}